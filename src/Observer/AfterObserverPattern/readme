*** Flipkart appln with Observer Design Pattern ***

# When to use Observer design pattern?

Whenever there's an occurrence of a special event, we have to call many external dependencies.
Examples:
1) Flipkart/Amazon order placed  ===> Notify courier partner, inventory management, Email/Mobile SMS service, Invoice gen
2) Facebook post ==> Feed updates, Notification system, Search index update
3) New student enrolled ==> Email allotment, Mentor assignment, Room allotment, SMS sender
4) Banking transaction ===> Update balance, detect fraud, Notify user by SMS, Add transaction logs

# How to use?

1) Create an common interface --> OrderPlacedObserver and add a method onOrderPlaced()
2) Ask all services - email, sms, courier etc implement this interface
3) In client code, create a flipkart object, create services objects and pass 'flipkart' object to all services constructors.
4) In Flipkart, add methods - addorderobserver, removeorderobserver.


# Issues with earlier code without this design pattern are all solved now.

1) Tight coupling ==> Flipkart class is decoupled w all services now, due to use of interface - orderplacedobserver
2) OCP ==> new observers can be without changing existing code
3) Scalability ==> We can now add/remove services as we're not feeding them to constructors


Few good practices while implementing observer pattern:
1) Handle service failures
    Eg: If email service goes down, appln shouldn't stop abruptly  ===> Use error handling

    public void onOrderPlaced(Order order) {
        for (OrderPlacedObserver observer : orderPlacedObservers) {
            try {
                observer.onOrderPlaced(order);
            } catch (Exception e) {
                // Handle or log the exception without affecting others
                System.err.println("Error notifying observer: " + e.getMessage());
            }
        }
    }

2) Observer Management:
    Provide methods to add and remove observers so that the subjectâ€™s observer list can be managed dynamically
    Use addOrderPlacedObserver() and public void removeOrderPlacedObserver()

3) Order of calling services
    In certain systems, order matters. For eg: Document approvals
    Initial review team -> Legal team -> Financial team -> Executive approval

    How to implement ? Use Linkedlist to store observers, as u MUST traverse the ll sequentially

4) Asynchronous calling of services:
    Certain services might take longer than others, so u could use threads and call them asynchronously.

